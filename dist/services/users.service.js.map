{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { Service } from 'typedi';\nimport { DB } from '@database';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@/exceptions/httpException';\nimport { User } from '@interfaces/users.interface';\n\n@Service()\nexport class UserService {\n  public async findAllUser(): Promise<User[]> {\n    const allUser: User[] = await DB.Users.findAll();\n    return allUser;\n  }\n\n  public async findUserById(userId: number): Promise<User> {\n    const findUser: User = await DB.Users.findByPk(userId);\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    return findUser;\n  }\n\n  public async findUserByEmail(email: string): Promise<User> {\n    const findUser: User = await DB.Users.findOne({\n      where: {\n        email: email,\n      },\n    });\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    return findUser;\n  }\n\n  public async createUser(userData: CreateUserDto): Promise<User> {\n    const findUser: User = await DB.Users.findOne({ where: { email: userData.email } });\n    if (findUser) throw new HttpException(409, `This email ${userData.email} already exists`);\n\n    const hashedPassword = await hash(userData.password, 10);\n    const createUserData: User = await DB.Users.create({ ...userData, password: hashedPassword });\n    return createUserData;\n  }\n\n  public async updateUser(userId: number, userData: CreateUserDto): Promise<User> {\n    const findUser: User = await DB.Users.findByPk(userId);\n\n    if (!findUser) {\n      throw new HttpException(409, \"User doesn't exist\");\n    }\n\n    const hashedPassword = await hash(userData.password, 10);\n\n    await DB.Users.update({ ...userData, password: hashedPassword }, { where: { id: userId } });\n\n    const updateUser: User = await DB.Users.findByPk(userId);\n    return updateUser;\n  }\n\n  public async deleteUser(userId: number): Promise<User> {\n    const findUser: User = await DB.Users.findByPk(userId);\n    if (!findUser) throw new HttpException(409, \"User doesn't exist\");\n\n    await DB.Users.destroy({ where: { id: userId } });\n\n    return findUser;\n  }\n}\n"],"names":["UserService","findAllUser","allUser","DB","Users","findAll","findUserById","userId","findUser","findByPk","HttpException","findUserByEmail","email","findOne","where","createUser","userData","hashedPassword","hash","password","createUserData","create","updateUser","update","id","deleteUser","destroy","Service"],"mappings":";;;;+BAQaA;;;eAAAA;;;wBARQ;wBACG;0BACL;+BAEW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIvB,IAAA,AAAMA,cAAN,MAAMA;IACX,MAAaC,cAA+B;QAC1C,MAAMC,UAAkB,MAAMC,YAAE,CAACC,KAAK,CAACC,OAAO;QAC9C,OAAOH;IACT;IAEA,MAAaI,aAAaC,MAAc,EAAiB;QACvD,MAAMC,WAAiB,MAAML,YAAE,CAACC,KAAK,CAACK,QAAQ,CAACF;QAC/C,IAAI,CAACC,UAAU,MAAM,IAAIE,4BAAa,CAAC,KAAK;QAE5C,OAAOF;IACT;IAEA,MAAaG,gBAAgBC,KAAa,EAAiB;QACzD,MAAMJ,WAAiB,MAAML,YAAE,CAACC,KAAK,CAACS,OAAO,CAAC;YAC5CC,OAAO;gBACLF,OAAOA;YACT;QACF;QACA,IAAI,CAACJ,UAAU,MAAM,IAAIE,4BAAa,CAAC,KAAK;QAE5C,OAAOF;IACT;IAEA,MAAaO,WAAWC,QAAuB,EAAiB;QAC9D,MAAMR,WAAiB,MAAML,YAAE,CAACC,KAAK,CAACS,OAAO,CAAC;YAAEC,OAAO;gBAAEF,OAAOI,SAASJ,KAAK;YAAC;QAAE;QACjF,IAAIJ,UAAU,MAAM,IAAIE,4BAAa,CAAC,KAAK,CAAC,WAAW,EAAEM,SAASJ,KAAK,CAAC,eAAe,CAAC;QAExF,MAAMK,iBAAiB,MAAMC,IAAAA,YAAI,EAACF,SAASG,QAAQ,EAAE;QACrD,MAAMC,iBAAuB,MAAMjB,YAAE,CAACC,KAAK,CAACiB,MAAM,CAAC,wCAAKL;YAAUG,UAAUF;;QAC5E,OAAOG;IACT;IAEA,MAAaE,WAAWf,MAAc,EAAES,QAAuB,EAAiB;QAC9E,MAAMR,WAAiB,MAAML,YAAE,CAACC,KAAK,CAACK,QAAQ,CAACF;QAE/C,IAAI,CAACC,UAAU;YACb,MAAM,IAAIE,4BAAa,CAAC,KAAK;QAC/B;QAEA,MAAMO,iBAAiB,MAAMC,IAAAA,YAAI,EAACF,SAASG,QAAQ,EAAE;QAErD,MAAMhB,YAAE,CAACC,KAAK,CAACmB,MAAM,CAAC,wCAAKP;YAAUG,UAAUF;YAAkB;YAAEH,OAAO;gBAAEU,IAAIjB;YAAO;QAAE;QAEzF,MAAMe,aAAmB,MAAMnB,YAAE,CAACC,KAAK,CAACK,QAAQ,CAACF;QACjD,OAAOe;IACT;IAEA,MAAaG,WAAWlB,MAAc,EAAiB;QACrD,MAAMC,WAAiB,MAAML,YAAE,CAACC,KAAK,CAACK,QAAQ,CAACF;QAC/C,IAAI,CAACC,UAAU,MAAM,IAAIE,4BAAa,CAAC,KAAK;QAE5C,MAAMP,YAAE,CAACC,KAAK,CAACsB,OAAO,CAAC;YAAEZ,OAAO;gBAAEU,IAAIjB;YAAO;QAAE;QAE/C,OAAOC;IACT;AACF;AAxDaR;IADZ2B,IAAAA,eAAO;GACK3B"}
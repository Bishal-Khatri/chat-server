{"version":3,"sources":["../../src/middlewares/auth.middleware.ts"],"sourcesContent":["import { NextFunction, Response } from 'express';\nimport { verify } from 'jsonwebtoken';\nimport { SECRET_KEY } from '@config';\nimport { DB } from '@database';\nimport { HttpException } from '@exceptions/httpException';\nimport { DataStoredInToken, RequestWithUser } from '@interfaces/auth.interface';\n\nconst getAuthorization = req => {\n  const header = req.header('Authorization');\n  if (header) return header.split('Bearer ')[1];\n  return null;\n};\n\nexport const AuthMiddleware = async (req: RequestWithUser, res: Response, next: NextFunction) => {\n  try {\n    const Authorization = getAuthorization(req);\n\n    if (Authorization) {\n      const { id } = verify(Authorization, SECRET_KEY) as DataStoredInToken;\n      const findUser = await DB.Users.findByPk(id);\n\n      if (findUser) {\n        req.user = findUser;\n        next();\n      } else {\n        next(new HttpException(401, 'Wrong authentication token'));\n      }\n    } else {\n      next(new HttpException(401, 'Authentication token missing'));\n    }\n  } catch (error) {\n    next(new HttpException(401, 'Wrong authentication token'));\n  }\n};\n"],"names":["AuthMiddleware","getAuthorization","req","header","split","res","next","Authorization","id","verify","SECRET_KEY","findUser","DB","Users","findByPk","user","HttpException","error"],"mappings":";;;;+BAaaA;;;eAAAA;;;8BAZU;wBACI;0BACR;+BACW;AAG9B,MAAMC,mBAAmBC,CAAAA;IACvB,MAAMC,SAASD,IAAIC,MAAM,CAAC;IAC1B,IAAIA,QAAQ,OAAOA,OAAOC,KAAK,CAAC,UAAU,CAAC,EAAE;IAC7C,OAAO;AACT;AAEO,MAAMJ,iBAAiB,OAAOE,KAAsBG,KAAeC;IACxE,IAAI;QACF,MAAMC,gBAAgBN,iBAAiBC;QAEvC,IAAIK,eAAe;YACjB,MAAM,EAAEC,EAAE,EAAE,GAAGC,IAAAA,oBAAM,EAACF,eAAeG,kBAAU;YAC/C,MAAMC,WAAW,MAAMC,YAAE,CAACC,KAAK,CAACC,QAAQ,CAACN;YAEzC,IAAIG,UAAU;gBACZT,IAAIa,IAAI,GAAGJ;gBACXL;YACF,OAAO;gBACLA,KAAK,IAAIU,4BAAa,CAAC,KAAK;YAC9B;QACF,OAAO;YACLV,KAAK,IAAIU,4BAAa,CAAC,KAAK;QAC9B;IACF,EAAE,OAAOC,OAAO;QACdX,KAAK,IAAIU,4BAAa,CAAC,KAAK;IAC9B;AACF"}
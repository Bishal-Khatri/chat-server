{"version":3,"sources":["../../src/controllers/chat.controller.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Container } from 'typedi';\r\nimport { ChatService } from '@/services/chat.service';\r\nimport { NextFunction, Request, Response } from 'express';\r\nimport { ClientToServerEvents } from '@/interfaces/socket.io.interface';\r\nimport { UserModel } from '@/models/user.model';\r\nimport { RequestWithUser } from '@interfaces/auth.interface';\r\nimport { HttpException } from '@/exceptions/httpException';\r\nimport { User } from '@interfaces/users.interface';\r\nimport { ChatModel } from '@/models/chat.model';\r\nimport { FindOptions, WhereOptions } from 'sequelize';\r\nimport { Op } from 'sequelize';\r\nimport { emitSocketEvent } from '@/socket';\r\nimport { MessageModel } from '@/models/message.model';\r\nimport { ChatEvent } from '@/constants';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport class ChatController {\r\n  public chat = Container.get(ChatService);\r\n\r\n  public getAllChats = async (req: RequestWithUser, res: Response, next: NextFunction) => {\r\n    try {\r\n      const authUser: User = req.user;\r\n\r\n      const allChats = await ChatModel.findAll({\r\n        where:{\r\n          admin_id: authUser.id,\r\n        },\r\n        include: [\r\n          {\r\n            model: UserModel,\r\n            as: 'receiver',\r\n          },\r\n          {\r\n            model: UserModel,\r\n            as: 'owner',\r\n          },\r\n        ],\r\n      });\r\n      \r\n      res.status(201).json({\r\n        data: allChats,\r\n        message: 'allChatList',\r\n      });\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public createChat = async (req: RequestWithUser, res: Response, next: NextFunction) => {\r\n    try {\r\n      const { receiver_id } = req.body;\r\n\r\n      // Find receiver by ID\r\n      const receiver = await UserModel.findOne({\r\n        where: {\r\n          id: receiver_id,\r\n        },\r\n      });\r\n\r\n      if (!receiver) {\r\n        throw new HttpException(404, 'User does not exist');\r\n      }\r\n\r\n      const authUser: User = req.user;\r\n\r\n      if (receiver.id === authUser.id) {\r\n        throw new HttpException(404, 'You cannot chat with yourself');\r\n      }\r\n\r\n      /*\r\n       * Find chat record from chats table\r\n       */\r\n\r\n      let chatData = await ChatModel.findOne({\r\n        where: {\r\n          admin_id: authUser.id,\r\n          receiver_id: receiver.id\r\n        }\r\n      });\r\n\r\n       /*\r\n       * Create two new chat record between auth user and receiver if not available\r\n       */\r\n      if(!chatData){\r\n        // Generate Inbox Hash\r\n        const inboxHash = uuidv4();\r\n\r\n        chatData = await ChatModel.create({\r\n          name: 'Chat',\r\n          admin_id: authUser.id,\r\n          receiver_id: receiver.id,\r\n          is_group: false,\r\n          inbox_hash: inboxHash\r\n        });\r\n\r\n        await ChatModel.create({\r\n          name: 'Chat',\r\n          admin_id: receiver.id,\r\n          receiver_id: authUser.id,\r\n          is_group: false,\r\n          inbox_hash: inboxHash\r\n        });\r\n      }\r\n\r\n      // emitSocketEvent(req, userData.id, 'newChat', []);\r\n\r\n      res.status(201).json({\r\n        data: chatData,\r\n        message: 'newChatCreated',\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public getMessage = async (req: RequestWithUser, res: Response, next: NextFunction) => {\r\n    try {\r\n      const { receiverId } = req.params;\r\n\r\n      // Find receiver by ID\r\n      const receiver = await UserModel.findByPk(receiverId);\r\n\r\n      if (!receiver) {\r\n        throw new HttpException(404, 'Receiver does not exist');\r\n      }\r\n\r\n      const authUser: User = req.user;\r\n\r\n      if (receiver.id === authUser.id) {\r\n        throw new HttpException(404, 'You cannot chat with yourself');\r\n      }\r\n\r\n      /*\r\n       * Create new chat record between auth user and receiver if not available\r\n       */\r\n      const chatData = await ChatModel.findOne({\r\n        where: {\r\n          admin_id: authUser.id,\r\n          receiver_id: receiver.id,\r\n        },\r\n        include: [\r\n          {\r\n            model: UserModel,\r\n            as: 'receiver',\r\n          },\r\n        ],\r\n      });\r\n\r\n      const {inbox_hash} = chatData;\r\n\r\n      const messages = await MessageModel.findAll({\r\n        where: {\r\n          inbox_hash: inbox_hash\r\n        }\r\n      });\r\n\r\n      res.status(201).json({\r\n        data: {chatData: chatData, messages: messages},\r\n        message: 'success',\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.log(error);\r\n      next(error);\r\n    }\r\n  };\r\n\r\n  public sendMessage = async (req: RequestWithUser, res: Response, next: NextFunction) => {\r\n    try {\r\n      const authUser: User = req.user;\r\n\r\n      const { message, inbox_hash } = req.body;\r\n\r\n      const messageData = await MessageModel.create({\r\n        message: message,\r\n        inbox_hash: inbox_hash,\r\n        sender_id: authUser.id,\r\n      });\r\n\r\n      // Find receiver\r\n      const chatData = await ChatModel.findOne({\r\n        where: {\r\n          inbox_hash: inbox_hash,\r\n          admin_id: authUser.id\r\n        }\r\n      });\r\n\r\n      chatData.last_message = message.length < 20 ? message : message.substring(0, 20).trimEnd() + '...';\r\n      await chatData.save();\r\n\r\n      emitSocketEvent(req, chatData.receiver_id, ChatEvent.MESSAGE_RECEIVED_EVENT, messageData);\r\n      \r\n      res.status(201).json({\r\n        data: messageData,\r\n        message: 'message sent',\r\n      });\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n      next(error);\r\n    }\r\n  };\r\n}\r\n"],"names":["ChatController","chat","Container","get","ChatService","getAllChats","req","res","next","authUser","user","allChats","ChatModel","findAll","where","admin_id","id","include","model","UserModel","as","status","json","data","message","error","console","log","createChat","receiver_id","body","receiver","findOne","HttpException","chatData","inboxHash","uuidv4","create","name","is_group","inbox_hash","getMessage","receiverId","params","findByPk","messages","MessageModel","sendMessage","messageData","sender_id","last_message","length","substring","trimEnd","save","emitSocketEvent","ChatEvent","MESSAGE_RECEIVED_EVENT"],"mappings":"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"}
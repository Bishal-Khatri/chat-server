{"version":3,"sources":["../../src/socket/index.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { HttpException } from \"@/exceptions/httpException\";\r\nimport { UserModel } from \"@/models/user.model\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { ChatEvent } from '@/constants'\r\nimport { SECRET_KEY } from '@config';\r\n\r\n/**\r\n * @description This function is responsible to allow user to join the chat represented by chatId (chatId). event happens when user switches between the chats\r\n * @param {Socket<import(\"socket.io/dist/typed-events\").DefaultEventsMap, import(\"socket.io/dist/typed-events\").DefaultEventsMap, import(\"socket.io/dist/typed-events\").DefaultEventsMap, any>} socket\r\n */\r\nconst mountJoinChatEvent = socket => {\r\n  socket.on(ChatEvent.JOIN_CHAT_EVENT, chatId => {\r\n    console.log(`User joined the chat. chatId: `, chatId);\r\n    // joining the room with the chatId will allow specific events to be fired where we don't bother about the users like typing events\r\n    // E.g. When user types we don't want to emit that event to specific participant.\r\n    // We want to just emit that to the chat where the typing is happening\r\n    socket.join(chatId);\r\n  });\r\n};\r\n\r\n/**\r\n * @description This function is responsible to emit the typing event to the other participants of the chat\r\n * @param {Socket<import(\"socket.io/dist/typed-events\").DefaultEventsMap, import(\"socket.io/dist/typed-events\").DefaultEventsMap, import(\"socket.io/dist/typed-events\").DefaultEventsMap, any>} socket\r\n */\r\nconst mountParticipantTypingEvent = (socket) => {\r\n  socket.on(ChatEvent.TYPING_EVENT, (chatId) => {\r\n    console.log(chatId)\r\n    socket.in(chatId).emit(ChatEvent.TYPING_EVENT, chatId);\r\n  });\r\n};\r\n\r\n/**\r\n * @description This function is responsible to emit the stopped typing event to the other participants of the chat\r\n * @param {Socket<import(\"socket.io/dist/typed-events\").DefaultEventsMap, import(\"socket.io/dist/typed-events\").DefaultEventsMap, import(\"socket.io/dist/typed-events\").DefaultEventsMap, any>} socket\r\n */\r\nconst mountParticipantStoppedTypingEvent = (socket) => {\r\n  socket.on(ChatEvent.STOP_TYPING_EVENT, (chatId) => {\r\n    socket.in(chatId).emit(ChatEvent.STOP_TYPING_EVENT, chatId);\r\n  });\r\n};\r\n\r\n\r\nconst initializeSocketIO = (io) => {\r\n    return io.on(\"connection\", async (socket) => {\r\n      try {\r\n        const { token } = socket.handshake.auth;\r\n\r\n        if (!token) {\r\n          throw new HttpException(403, \"Un-authorized handshake. Token is missing\");\r\n        }\r\n        \r\n        const decodedToken = jwt.verify(token, SECRET_KEY);\r\n  \r\n        const user = await UserModel.findByPk(decodedToken?.id);\r\n  \r\n        if (!user) {\r\n            throw new HttpException(403, \"Un-authorized handshake. Token is invalid\");\r\n        }\r\n        socket.user = user;\r\n        \r\n        // We are creating a room with user id so that if user is joined but does not have any active chat going on.\r\n        // still we want to emit some socket events to the user.\r\n        // so that the client can catch the event and show the notifications.\r\n        socket.join(user.id.toString());\r\n        socket.emit(ChatEvent.CONNECTED_EVENT); // emit the connected event so that client is aware\r\n        console.log(\"User connected. userId: \", user.id.toString());\r\n  \r\n        // Common events that needs to be mounted on the initialization\r\n        mountJoinChatEvent(socket);\r\n        mountParticipantTypingEvent(socket);\r\n        mountParticipantStoppedTypingEvent(socket);\r\n  \r\n        socket.on('disconnect', () => {\r\n          console.log(\"user has disconnected ðŸš«\");\r\n          if (socket.user?.id) {\r\n            socket.leave(socket.user.id);\r\n          }\r\n        });\r\n\r\n      } catch (error) {\r\n        console.log('SocketError: '+error.message)\r\n        socket.emit(\r\n          ChatEvent.SOCKET_ERROR_EVENT,\r\n          error?.message || \"Something went wrong while connecting to the socket.\"\r\n        );\r\n      }\r\n    });\r\n  };\r\n  \r\n  /**\r\n   *\r\n   * @param {import(\"express\").Request} req - Request object to access the `io` instance set at the entry point\r\n   * @param {string} roomId - Room where the event should be emitted\r\n   * @param {AvailableChatEvents[0]} event - Event that should be emitted\r\n   * @param {any} payload - Data that should be sent when emitting the event\r\n   * @description Utility function responsible to abstract the logic of socket emission via the io instance\r\n   */\r\n  const emitSocketEvent = (req, roomId, event, payload) => {\r\n    req.app.get(\"io\").in(roomId.toString()).emit(event, payload);\r\n  };\r\n  \r\n  export { initializeSocketIO, emitSocketEvent };\r\n  "],"names":["emitSocketEvent","initializeSocketIO","mountJoinChatEvent","socket","on","ChatEvent","JOIN_CHAT_EVENT","chatId","console","log","join","mountParticipantTypingEvent","TYPING_EVENT","in","emit","mountParticipantStoppedTypingEvent","STOP_TYPING_EVENT","io","token","handshake","auth","HttpException","decodedToken","jwt","verify","SECRET_KEY","user","UserModel","findByPk","id","toString","CONNECTED_EVENT","leave","error","message","SOCKET_ERROR_EVENT","req","roomId","event","payload","app","get"],"mappings":";;;;;;;;;;;IAsG+BA,eAAe;eAAfA;;IAApBC,kBAAkB;eAAlBA;;;+BArGmB;2BACJ;uDACV;2BACU;wBACC;;;;;;AAM3B,MAAMC,qBAAqBC,CAAAA;IACzBA,OAAOC,EAAE,CAACC,oBAAS,CAACC,eAAe,EAAEC,CAAAA;QACnCC,QAAQC,GAAG,CAAC,CAAC,8BAA8B,CAAC,EAAEF;QAI9CJ,OAAOO,IAAI,CAACH;IACd;AACF;AAMA,MAAMI,8BAA8B,CAACR;IACnCA,OAAOC,EAAE,CAACC,oBAAS,CAACO,YAAY,EAAE,CAACL;QACjCC,QAAQC,GAAG,CAACF;QACZJ,OAAOU,EAAE,CAACN,QAAQO,IAAI,CAACT,oBAAS,CAACO,YAAY,EAAEL;IACjD;AACF;AAMA,MAAMQ,qCAAqC,CAACZ;IAC1CA,OAAOC,EAAE,CAACC,oBAAS,CAACW,iBAAiB,EAAE,CAACT;QACtCJ,OAAOU,EAAE,CAACN,QAAQO,IAAI,CAACT,oBAAS,CAACW,iBAAiB,EAAET;IACtD;AACF;AAGA,MAAMN,qBAAqB,CAACgB;IACxB,OAAOA,GAAGb,EAAE,CAAC,cAAc,OAAOD;QAChC,IAAI;YACF,MAAM,EAAEe,KAAK,EAAE,GAAGf,OAAOgB,SAAS,CAACC,IAAI;YAEvC,IAAI,CAACF,OAAO;gBACV,MAAM,IAAIG,4BAAa,CAAC,KAAK;YAC/B;YAEA,MAAMC,eAAeC,qBAAG,CAACC,MAAM,CAACN,OAAOO,kBAAU;YAEjD,MAAMC,OAAO,MAAMC,oBAAS,CAACC,QAAQ,CAACN,yBAAAA,mCAAAA,aAAcO,EAAE;YAEtD,IAAI,CAACH,MAAM;gBACP,MAAM,IAAIL,4BAAa,CAAC,KAAK;YACjC;YACAlB,OAAOuB,IAAI,GAAGA;YAKdvB,OAAOO,IAAI,CAACgB,KAAKG,EAAE,CAACC,QAAQ;YAC5B3B,OAAOW,IAAI,CAACT,oBAAS,CAAC0B,eAAe;YACrCvB,QAAQC,GAAG,CAAC,4BAA4BiB,KAAKG,EAAE,CAACC,QAAQ;YAGxD5B,mBAAmBC;YACnBQ,4BAA4BR;YAC5BY,mCAAmCZ;YAEnCA,OAAOC,EAAE,CAAC,cAAc;oBAElBD;gBADJK,QAAQC,GAAG,CAAC;gBACZ,KAAIN,eAAAA,OAAOuB,IAAI,cAAXvB,mCAAAA,aAAa0B,EAAE,EAAE;oBACnB1B,OAAO6B,KAAK,CAAC7B,OAAOuB,IAAI,CAACG,EAAE;gBAC7B;YACF;QAEF,EAAE,OAAOI,OAAO;YACdzB,QAAQC,GAAG,CAAC,kBAAgBwB,MAAMC,OAAO;YACzC/B,OAAOW,IAAI,CACTT,oBAAS,CAAC8B,kBAAkB,EAC5BF,CAAAA,kBAAAA,4BAAAA,MAAOC,OAAO,KAAI;QAEtB;IACF;AACF;AAUA,MAAMlC,kBAAkB,CAACoC,KAAKC,QAAQC,OAAOC;IAC3CH,IAAII,GAAG,CAACC,GAAG,CAAC,MAAM5B,EAAE,CAACwB,OAAOP,QAAQ,IAAIhB,IAAI,CAACwB,OAAOC;AACtD"}
{"version":3,"sources":["../src/app.ts"],"sourcesContent":["import 'reflect-metadata';\nimport compression from 'compression';\nimport cors from 'cors';\nimport express from 'express';\nimport helmet from 'helmet';\nimport hpp from 'hpp';\nimport morgan from 'morgan';\nimport swaggerJSDoc from 'swagger-jsdoc';\nimport swaggerUi from 'swagger-ui-express';\nimport { NODE_ENV, PORT, LOG_FORMAT, ORIGIN, CREDENTIALS } from '@config';\nimport { DB } from '@database';\nimport { Routes } from '@interfaces/routes.interface';\nimport { ErrorMiddleware } from '@middlewares/error.middleware';\nimport { logger, stream } from '@utils/logger';\nimport { Server } from 'socket.io';\nimport { ClientToServerEvents, ServerToClientEvents } from './interfaces/socket.io.interface';\nimport { ChatController } from './controllers/chat.controller';\nimport { initializeSocketIO } from './socket';\n\nexport class App {\n  public app: express.Application;\n  public env: string;\n  public port: number | string;\n  public io;\n\n  public chatController = new ChatController();\n\n  constructor(routes: Routes[]) {\n    this.app = express();\n    this.env = NODE_ENV || 'development';\n    this.port = PORT || 3000;\n\n    this.connectToDatabase();\n    this.initializeMiddlewares();\n    this.initializeRoutes(routes);\n    this.initializeSwagger();\n    this.initializeErrorHandling();\n  }\n\n  public listen() {\n    const httpServer = this.app.listen(this.port, () => {\n      logger.info(`App listening on the port: ${this.port}`);\n    });\n\n    const io = new Server<ClientToServerEvents, ServerToClientEvents>({\n      cors: { origin: JSON.parse(ORIGIN), credentials: CREDENTIALS },\n    });\n\n    io.listen(httpServer);\n    initializeSocketIO(io);\n\n    this.app.set('io', io);\n  }\n\n  public getServer() {\n    return this.app;\n  }\n\n  private async connectToDatabase() {\n    await DB.sequelize.sync({ force: false });\n  }\n\n  private initializeMiddlewares() {\n    this.app.use(morgan(LOG_FORMAT, { stream }));\n    this.app.use(cors({ origin: JSON.parse(ORIGIN), credentials: CREDENTIALS }));\n    this.app.use(hpp());\n    this.app.use(helmet());\n    this.app.use(compression());\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n  }\n\n  private initializeRoutes(routes: Routes[]) {\n    routes.forEach(route => {\n      this.app.use('/', route.router);\n    });\n  }\n\n  private initializeSwagger() {\n    const options = {\n      swaggerDefinition: {\n        info: {\n          title: 'REST API',\n          version: '1.0.0',\n          description: 'Example docs',\n        },\n      },\n      apis: ['swagger.yaml'],\n    };\n\n    const specs = swaggerJSDoc(options);\n    this.app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs));\n  }\n\n  private initializeErrorHandling() {\n    this.app.use(ErrorMiddleware);\n  }\n}\n"],"names":["App","listen","httpServer","app","port","logger","info","io","Server","cors","origin","JSON","parse","ORIGIN","credentials","CREDENTIALS","initializeSocketIO","set","getServer","connectToDatabase","DB","sequelize","sync","force","initializeMiddlewares","use","morgan","LOG_FORMAT","stream","hpp","helmet","compression","express","json","urlencoded","extended","initializeRoutes","routes","forEach","route","router","initializeSwagger","options","swaggerDefinition","title","version","description","apis","specs","swaggerJSDoc","swaggerUi","serve","setup","initializeErrorHandling","ErrorMiddleware","constructor","env","chatController","ChatController","NODE_ENV","PORT"],"mappings":"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"}